#! /usr/bin/python

"""
   Copyright (C) 2000-2012, JAMK University of Applied Sciences 

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, version 2.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>

"""

import os, sys
from datetime import datetime

from twisted.application import internet, service
from twisted.internet import reactor, threads
from twisted.python import log
from twisted.web import server, xmlrpc
import yaml

from fnts import fnts


class fntsDaemon(xmlrpc.XMLRPC):

    testsRunning = 0
    cloud = None
    rResult = {}
       
    file = open('/etc/fnts.conf')
    conf = yaml.load(file)
    file.close()
    os.environ['DISPLAY'] = conf['general']['display']
    
    def executeTestCase(self, data):
        log.msg('Got a request')
        log.msg(data)

        #talk with main program, send data and expect result
        f = fnts.fnts(self.conf, self.cloud, self)

        # calling the FNTS core
        (result, notes, cloud) = f.run(data)
        
        self.cloud = cloud

        # processing results to be sent back to TestLink / whoever called
        if(result == 1):
            self.rResult['result'] = 'p'
        elif(result == 0):
            self.rResult['result'] = 'f'
        else:
            self.rResult['result'] = 'b'

        self.rResult['notes'] = notes
        self.rResult['scheduled'] = 'now'
        t = datetime.now()
        self.rResult['timestampISO'] = t.strftime("%Y-%m-%d %H:%M:%S")

        log.msg('-----------------------------------------------------')
        log.msg('returning ', "{'result':" + self.rResult['result']+ ", 'notes':" +self.rResult['notes']+", 'scheduled':'now', 'timestampISO':"+self.rResult['timestampISO']+"}")
        log.msg('-----------------------------------------------------')
        return {'result':self.rResult['result'],'notes':self.rResult['notes'], 'scheduled':'now', 'timestampISO':self.rResult['timestampISO']}

    def onError(self, result):
        log.msg(result)
        log.msg('Something went wrong on threading execution.')

    def onExecutionDone(self, result):
        log.msg('returning deferred results')
        return result

    def xmlrpc_executeTestCase(self, data):
        deferred = threads.deferToThread(self.executeTestCase, data)
        deferred.addCallback(self.onExecutionDone)
        deferred.addErrback(self.onError)
        return deferred

    def xmlrpc_ping(self, data={}):
        log.msg('ping')
        return {'ping':'pong'}
    
    def xmlrpc_getTestsRunning(self, data={}):
        return self.testsRunning
    
    def _addTestsRunning(self, count):
        self.testsRunning = self.testsRunning + count
        log.msg("Current workload: " + str(self.testsRunning))
    
    def _getTestsRunning(self):
        return self.testsRunning
        

if __name__ == '__main__':      
    log.startLogging(sys.stdout)
    r = fntsDaemon()
    reactor.listenTCP(8000, server.Site(r))
    reactor.run()    

else: # run the worker as a twistd service application: twistd -y xmlrpc_server.py --no_save        
    application = service.Application('fnts')
    r = fntsDaemon()
    website = internet.TCPServer(8000, server.Site(r))
    website.setServiceParent(application)
