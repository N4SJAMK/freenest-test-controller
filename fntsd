#! /usr/bin/python

"""
   Copyright (C) 2000-2012, JAMK University of Applied Sciences 

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, version 2.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>

"""

import sys, os, time
from datetime import datetime
from xml.etree import ElementTree as ET

import yaml
from twisted.web import xmlrpc, server
from twisted.application import internet, service
from twisted.internet import reactor, threads
from twisted.python import log

from fnts import fnts


class fntsDaemon(xmlrpc.XMLRPC):

    rResult = {}

    def executeTestCase(self, data):
        log.msg('Got a request')
        log.msg(data)

        #talk with main program, send data and expect result
        f = fnts.fnts()

	    # calling the FNTS core
        (result, notes, timestamp) = f.run(data)

	    # processing results to be sent back to TestLink / whoever called
        if(result == 1):
            self.rResult['result'] = 'p'
        elif(result == 0):
            self.rResult['result'] = 'f'
        else:
            self.rResult['result'] = 'b'

        self.rResult['notes'] = notes
        self.rResult['scheduled'] = 'now'
        t = datetime.now()
        self.rResult['timestampISO'] = t.strftime("%Y-%m-%d %H:%M:%S")

        log.msg('-----------------------------------------------------')
        log.msg('returning ', "{'result':" + self.rResult['result']+ ", 'notes':" +self.rResult['notes']+", 'scheduled':'now', 'timestampISO':"+self.rResult['timestampISO']+"}")
        log.msg('-----------------------------------------------------')
        return {'result':self.rResult['result'],'notes':self.rResult['notes'], 'scheduled':'now', 'timestampISO':self.rResult['timestampISO']}

    def onError(self, result):
        log.msg(result)
        log.msg('Something went wrong on threading execution.')

    def onExecutionDone(self, result):
        log.msg('returning deferred results')
        return result

    def xmlrpc_executeTestCase(self, data):
        deferred = threads.deferToThread(self.executeTestCase, data)
        deferred.addCallback(self.onExecutionDone)
        deferred.addErrback(self.onError)
        return deferred

if __name__ == '__main__':      
    log.startLogging(sys.stdout)
    r = fntsDaemon()
    reactor.listenTCP(8000, server.Site(r))
    reactor.run()    

else: # run the worker as a twistd service application: twistd -y xmlrpc_server.py --no_save        
    application = service.Application('fnts')
    r = fntsDaemon()
    website = internet.TCPServer(8000, server.Site(r))
    website.setServiceParent(application)
