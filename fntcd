#! /usr/bin/python

"""
   Copyright (C) 2000-2012, JAMK University of Applied Sciences 

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, version 2.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>

"""

from twisted.web import xmlrpc, server
from twisted.application.internet import TCPServer
from twisted.application.service import Application
from twisted.internet import reactor
from twisted.python import log
from twisted.internet import threads


from fntc import TestLinkAPI
import sys, os, time 
from twisted.python import log  
import yaml 
from datetime import datetime
from xml.etree import ElementTree as ET
from fntc.git_puller import gitpuller
from fntc.svn_puller import svnpuller
from fntc.fntc import fntc


class fntcService(xmlrpc.XMLRPC):
    """
    An example object to be published.
    """

    f = open('/etc/fntc.conf')
    conf = yaml.load(f)
    f.close

    vOutputdir = conf['general']['outputdirectory']
    vTestdir = conf['general']['testingdirectory']
    versioncontrol = conf['general']['versioncontrol']
    
    SERVER_URL = conf['testlink']['serverURL'] + "lib/api/xmlrpc.php"
    devKey = conf['testlink']['devkey']
    rResult = {}

    def executeTestCase(self, data):        
        log.msg('Got a request')
        log.msg(data)

	# getting custom fields from Testlink
	if self.conf['general']['test_management'] == 'Testlink':
        	log.msg('start testlink API')
		api = TestLinkAPI.TestLinkPoller(self.SERVER_URL, self.devKey)
		fields = api.getCustomFields(data, log, self.conf)
		
		cfEngine = fields[0]
		cfScripts = fields[1]
		runtimes = fields[2]
		tolerance = fields[3]
		tag = fields[4]

	else:
		# no place to look for variables, using the default ones from config
		cfEngine = self.conf['variables']['default_engine']
		cfScripts = data['testCaseName'] + ".txt"
		runtimes = int(self.conf['variables']['default_runtimes'])
		tolerance = int(self.conf['variables']['default_tolerance'])
		tag = "null"


        # checking the version control software and choosing the correct driver
	#TODO: this part could be more flexible
	#GIT
	if self.versioncontrol == "GIT":
		puller = gitpuller()
		gitresult = puller.pull(self.vTestdir, tag)
		if gitresult != "ok":
			log.msg('Git error, running old tests. ERROR:', gitresult)
		testdir = self.vTestdir
	#SVN
	elif self.versioncontrol == "SVN":
		puller = svnpuller()
		svnresult = puller.pull(self.vTestdir)
		if svnresult != "ok":
			log.msg('SVN error, running old tests. ERROR:', svnresult)
		#setting the testdir to point to the tests instead of the repository
		#if a tag is given and not found, the trunk is used as a test resource
		if tag == "null":
			testdir = self.vTestdir + "trunk/tests/"
		else:
			if os.path.exists(self.vTestdir + tag + "/tests/") != true:
				log.msg("Tagged tests were not found from the repository, running tests from trunk")
				testdir = self.vTestdir + "/trunk/tests/"
			else:
				testdir = self.vTestdir + tag + "/tests/"
	#something else, not officially supported
        else:
            msg = "Version control driver for " + self.versioncontrol + " was not found, tests cannot be updated"
            log.msg(msg)


        ''' talk with main program, send data and expect result '''
        log.msg('Running following scripts:', cfScripts)
        f = fntc()
        try:
            runtimes = int(runtimes)
        except Exception, e:
            # runtimes is not a number
            log.msg('"RunTimes" contains an invalid value, using default value')
            runtimes = int(self.conf['variables']['default_runtimes'])
        try:
            tolerance = int(tolerance)
        except Exception, e:
            log.msg('"Tolerance" contains an invalid value, using default value')
            tolerance = int(self.conf['variables']['default_tolerance'])

	# calling the FNTC core
        (result, notes, timestamp) = f.fntc_main(self.conf, cfEngine, cfScripts, runtimes, tolerance, self.vOutputdir, testdir, 'now', data['testCaseName'])

	# processing results to be sent back to TestLink / whoever called
        if(result == 1):
            self.rResult['result'] = 'p'
        elif(result == 0):
            self.rResult['result'] = 'f'
        else:
            self.rResult['result'] = 'b'

        self.rResult['notes'] = notes
        self.rResult['scheduled'] = 'now'
        t = datetime.now()
        self.rResult['timestampISO'] = t.strftime("%Y-%m-%d %H:%M:%S")

        log.msg('-----------------------------------------------------')
        log.msg('returning ', "{'result':" + self.rResult['result']+ ", 'notes':" +self.rResult['notes']+", 'scheduled':'now', 'timestampISO':"+self.rResult['timestampISO']+"}")
        log.msg('-----------------------------------------------------')
        return {'result':self.rResult['result'],'notes':self.rResult['notes'], 'scheduled':'now', 'timestampISO':self.rResult['timestampISO']}

    def onError(self, result):
	#TODO:: add better logging info and return of results
	log.msg('Something went wrong on threading execution.')

    def onExecutionDone(self, result):
	log.msg('returning deferred results')
	return result

    def xmlrpc_executeTestCase(self, data):
        deferred = threads.deferToThread(self.executeTestCase, data)
	deferred.addCallback(self.onExecutionDone)
	deferred.addErrback(self.onError)
        #value = self.executeTestCase(data)
        #log.msg(value)
        #return  {'result':'p', 'notes':'Message', 'scheduled':'now', 'timestampISO':'2012-09-26 11:33:08'}
	return deferred


if __name__ == '__main__':
    from twisted.internet import selectreactor
    #selectreactor.install ()

    from twisted.internet import reactor
    import sys
    log.startLogging(sys.stdout)
    r = fntcService()
    reactor.listenTCP(8000, server.Site(r))
    reactor.run()    

else: # run the worker as a twistd service application: twistd -y xmlrpc_server.py --no_save
    from twisted.application import service, internet        
    application = service.Application('fntcservice')
    r = fntcService()
    website = internet.TCPServer(8000, server.Site(r))
    website.setServiceParent(application)
